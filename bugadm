#! /usr/bin/env ruby

require_relative('config/bugdata')
require_relative('lib/rapport')
require_relative('lib/bugger')

def install_launchd()
  launchd_plist  = <<-EOS
  <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Label</key>
        <string>no.brujordet.bugger</string>
        <key>ProgramArguments</key>
        <array>
            <string>#{BugData.config.ruby_bin}</string>
            <string>#{__FILE__}</string>
            <string>notify</string>
        </array>
        <key>StandardErrorPath</key>
        <string>/dev/null</string>
        <key>StandardOutPath</key>
        <string>/dev/null</string>
        <key>StartInterval</key>
        <integer>#{BugData.config.bugfreq}</integer>
        <key>RunAtLoad</key>
        <true/>
    </dict>
    </plist>
    EOS
  File.open(CONFIG['bugadm_plist'], 'w') { |file| file.write(launchd_plist) }
end

def create_db() 
  puts "Creating empty db: #{BugData.config.db_path}"
  db = BuggerDB.new
  db.create_empty_db
  db.initialize_empty_db
end

def bugger_status()
  status = system 'launchctl list | grep no.brujordet.bugger > /dev/null'
  if (status)
    puts 'Bugger is loaded'
  else
    puts 'Bugger is not loaded'
  end
end

def bugger_control(action)
  cmd = "launchctl #{action} #{BugData.config.launchd_plist}"
  system cmd 
    bugger_status
end

def die_with_usage()
  puts "usage: bugadm (install|load|unload|reload|status|prompt|notify|rapport)"
    exit
end

die_with_usage unless ARGV.length > 0
parameter = ARGV[0]

BugData.configure do |config|    
    # nothing? 
end

case parameter
when 'install'
  create_db
  install_launchd
  bugger_control 'load'
when 
  'load', 'unload'
  bugger_control(parameter)
when 'reload'
  bugger_control('unload')
  install_launchd
  bugger_control('load')
when 'status'
  bugger_status
when 'prompt','notify'
  Bugger.new.bug(parameter)
when 'rapport'
  BugRapport.new.generateRapportFor(Time.now) 
else
  die_with_usage
end











