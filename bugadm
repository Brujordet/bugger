#! /usr/bin/env bash

############ Configuration handling ##############

launchd_plist=~/Library/LaunchAgents/no.brujordet.bugger.plist

update_configuration(){
    if [[ ! -f ~/.bugger/bug.conf ]]; then
        create_config
    fi

    . ~/.bugger/bug.conf

    if [[ ! -f ~/.bugger/bug.db ]]; then
        create_empty_db
    fi

    if [[ ! -f $launchd_plist ]]; then
        generate_job
    fi

    if [[ ! -f $bugger_cocoa ]]; then
        echo "ERMEGERD CocoaDialog IS NOT INSTALLED!!"
        echo "Get it here --> http://mstratman.github.io/cocoadialog/#download"
        exit 1
    fi
}

create_empty_db(){
    echo "Creating database $bugger_db"
    sqlite3 "$bugger_db" "create table
        task (
            task_id INTEGER PRIMARY KEY,
            name VARCHAR,
            description VARCHAR
        );"
    sqlite3 "$bugger_db" "create table 
        time (
            time_id INTEGER PRIMARY KEY, 
            timeStart DATETIME, 
            timeStop DATETIME,
            duration INTEGER,
            task_id INTEGER, 
            FOREIGN KEY(task_id) REFERENCES task(task_id)
        );"
}

create_config(){
    echo "Generating new config to ~/.bugger/bug.conf"
    if [[ ! -d ~/.bugger ]]; then
        mkdir ~/.bugger
    fi

    cat > ~/.bugger/bug.conf << EOF
    ### Edit me, and run <bugadm reload> ###
    bugger_intervall=900
    bugger_path=$(cd $(dirname $0) && pwd)/bin/bugger.rb
    bugger_db=~/.bugger/bug.db
    bugger_cocoa=/Applications/CocoaDialog.app/Contents/MacOS/CocoaDialog
    bugger_log=~/.bugger/bug.log
    bugger_ruby=/usr/local/bin/ruby
EOF
}

generate_job(){
    echo "Generating new Launchd job"
    bugadm_path=$(cd $(dirname $0) && pwd)$0
    cat > $launchd_plist <<- EOF
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Label</key>
        <string>no.brujordet.bugger</string>
        <key>ProgramArguments</key>
        <array>
            <string>$bugadm</string>
            <string>notify</string>
        </array>
        <key>StandardErrorPath</key>
        <string>$bugger_log</string>
        <key>StandardOutPath</key>
        <string>$bugger_log</string>
        <key>StartInterval</key>
        <integer>$bugger_intervall</integer>
        <key>RunAtLoad</key>
        <true/>
    </dict>
    </plist>
EOF
}

delete_job(){
    if [[ -f $launchd_plist ]]; then
        echo "Deleting launchd job"
        rm $launchd_plist
    fi
}

############ Process handling ##############

check_bugger_status(){
    launchctl list | grep no.brujordet.bugger
}

start_bugger(){
    echo "Starting Bugger"
    launchctl load $launchd_plist
}

stop_bugger(){
    if [[ ! -z "$(check_bugger_status)" ]]; then
        echo "Stopping Bugger"
        launchctl unload $launchd_plist
    else
        echo "Bugger was not running.."
    fi
}

status_bugger(){
    running=$(launchctl list | grep no.brujordet.bugger)
    if [[ ! -z "$(check_bugger_status)" ]]; then
        echo "Bugger is running!"
    else
        echo "Bugger is not running.."
    fi
}

############ Actuall bug   ##############
bug(){
    $bugger_ruby $bugger_path $bugger_db $bugger_cocoa $1
}

############ Parsing Input ##############

case $1 in
    install)
        update_configuration
        start_bugger
    ;;
    reload)
        stop_bugger
        delete_job
        update_configuration
        start_bugger
    ;;
    status)
        status_bugger
    ;;
    prompt)
        update_configuration
        bug prompt
    ;;
    start)
        start_bugger
    ;;
    stop)
        stop_bugger
    ;;
    notify)
        update_configuration
        bug
    ;;
    *)
        echo "usage: $0 (install|start|stop|reload|prompt|notify)"
    ;;
esac