#! /usr/bin/env ruby

require_relative('config/config')
require_relative('lib/rapport')
require_relative('lib/bugger')

def install_launchd()
	launchd_plist  = <<-EOS
	<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Label</key>
        <string>no.brujordet.bugger</string>
        <key>ProgramArguments</key>
        <array>
            <string>#{CONFIG['ruby_bin']}</string>
            <string>#{__FILE__}</string>
            <string>notify</string>
        </array>
        <key>StandardErrorPath</key>
        <string>#{CONFIG['bugger_log']}</string>
        <key>StandardOutPath</key>
        <string>#{CONFIG['bugger_log']}</string>
        <key>StartInterval</key>
        <integer>#{CONFIG['bugger_intervall']}</integer>
        <key>RunAtLoad</key>
        <true/>
    </dict>
    </plist>
    EOS
	File.open(CONFIG['bugadm_plist'], 'w') { |file| file.write(launchd_plist) }
end

def check_dependencies()
	if (File.exist?(CONFIG['bugger_cocoa']))
		puts "CocoaDialog is not installed --> http://mstratman.github.io/cocoadialog/#download"
		exit
	elsif !Gem::Specification::find_all_by_name('terminal-notifier').empty?
		puts "Gem terminal-notifier is not installed!"
		exit
	end		
end

def create_empty_db()	
	puts "Creating empty db: #{CONFIG['bugger_db']}"
	db = Database.new(CONFIG['bugger_db']) 
	db.create_empty_db
end

def bugger_status()
	status = system 'launchctl list | grep no.brujordet.bugger > /dev/null'
	if (status)
		puts 'Bugger is loaded'
	else
		puts 'Bugger is unloaded'
	end
end

def bugger_control(action)
	cmd = "launchctl #{action} #{CONFIG['bugadm_plist']}"
	system cmd 
    bugger_status
end

def die_with_usage()
	puts "usage: bugadm (install|load|unload|reload|status|prompt|notify|rapport)"
    exit
end

die_with_usage unless ARGV.length > 0
parameter = ARGV[0]

case parameter
when 'install'
    check_dependencies
	create_empty_db
	install_launchd
	bugger_control 'load'
when 
	'load', 'unload'
	bugger_control(parameter)
when 'reload'
	bugger_control('unload')
	install_launchd
	bugger_control('load')
when 'status'
	bugger_status
when 'prompt','notify'
	Bugger.new.bug(parameter)
when 'rapport'
	BugRapport.new.generateRapportFor(DateTime.now.to_date.to_s)	
else
	die_with_usage
end











